name: PR:3.4 U20

on:
  pull_request:
    branches:
      - 3.4

env:
  EXTRA_CMAKE_OPTIONS: '-DBUILD_DOCS=ON -DPYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 -DBUILD_EXAMPLES=ON -DOPENCV_ENABLE_NONFREE=ON -DENABLE_CCACHE=OFF'
  OPENCV_TEST_DATA_PATH: '/opencv_extra/testdata'
  OPENCV_DOCKER_WORKDIR: '/__w/opencv/opencv'
  PR_AUTHOR: ${{ github.event.pull_request.user.login }}
  SOURCE_BRANCH_NAME: ${{ github.head_ref }}
  TARGET_BRANCH_NAME: ${{ github.base_ref }}
  ANT_HOME: '/usr/share/ant'
  PYTHONPATH: /opencv-build/python_loader:$PYTHONPATH

jobs:
  BuildAndTest:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    container:
      image: quay.io/asenyaev/opencv-ubuntu:20.04
    steps:
    - name: PR info
      run: |
        echo "PR Author: ${{ env.PR_AUTHOR }}"
        echo "Source branch name: ${{ env.SOURCE_BRANCH_NAME }}"
        echo "Target branch name: ${{ env.TARGET_BRANCH_NAME }}"
    - name: Clean
      run: find . -mindepth 1 -delete
    - name: Fetch opencv
      uses: actions/checkout@v3
      with:
        repository: opencv/opencv
        ref: ${{ env.TARGET_BRANCH_NAME }}
        fetch-depth: 0
    - name: Merge opencv with ${{ env.SOURCE_BRANCH_NAME }} branch
      run: |
        cd ${{ env.OPENCV_DOCKER_WORKDIR }}
        git config --global --add safe.directory ${{ env.OPENCV_DOCKER_WORKDIR }}
        git config user.email "opencv.ci"
        git config user.name "opencv.ci"
        git pull -v "https://github.com/${{ env.PR_AUTHOR }}/opencv" "${{ env.SOURCE_BRANCH_NAME }}"
    - name: Clone opencv_extra
      run: git clone --single-branch --branch ${{ env.TARGET_BRANCH_NAME }} --depth 1 https://github.com/opencv/opencv_extra.git /opencv_extra
    - name: Configure OpenCV
      run: |
        cd /opencv-build
        cmake -G Ninja ${{ env.EXTRA_CMAKE_OPTIONS }} ${{ env.OPENCV_DOCKER_WORKDIR }}
    - name: Build OpenCV
      run: |
        cd /opencv-build
        ninja
    - name: Accuracy
      run: |
        cd /opencv-build
        accuracy_tests=($(ls bin/opencv_test*))
        for test_name in "${accuracy_tests[@]}"; do
          if [[ $(basename ${test_name}) != 'opencv_test_viz' ]]; then
            xvfb-run -a ${test_name}
          fi
        done
    - name: Performance
      run: |
        cd /opencv-build
        performance_tests=($(ls bin/opencv_perf*))
        for test_name in "${performance_tests[@]}"; do
          if [[ $(basename ${test_name}) != 'opencv_perf_viz' ]]; then
            xvfb-run -a ${test_name} --perf_impl=plain --perf_min_samples=1 --perf_force_samples=1 --perf_verify_sanity --skip_unstable=1
          fi
        done
    - name: Python3
      run: |
        cd ${{ env.OPENCV_DOCKER_WORKDIR }}/modules/python/test
        python3 ./test.py --repo ../../../ -v
    - name: Java
      run: |
        cd /opencv-build
        xvfb-run -a python3 ${{ env.OPENCV_DOCKER_WORKDIR }}/modules/ts/misc/run.py . -a -t java
    - name: Save Unit Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: junit-html
        path: /opencv-build/java_test/testResults/junit-noframes.html
    - name: Pylint
      run: |
        cd /opencv-build
        cmake --build . --config release --target check_pylint -- -j4

  BuildContrib:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    container:
      image: quay.io/asenyaev/opencv-ubuntu:20.04
    steps:
    - name: PR info
      run: |
        echo "PR Author: ${{ env.PR_AUTHOR }}"
        echo "Source branch name: ${{ env.SOURCE_BRANCH_NAME }}"
        echo "Target branch name: ${{ env.TARGET_BRANCH_NAME }}"
    - name: Clean
      run: find . -mindepth 1 -delete
    - name: Fetch opencv
      uses: actions/checkout@v3
      with:
        repository: opencv/opencv
        ref: ${{ env.TARGET_BRANCH_NAME }}
        fetch-depth: 0
    - name: Merge opencv with a test branch
      run: |
        cd ${{ env.OPENCV_DOCKER_WORKDIR }}
        git config --global --add safe.directory ${{ env.OPENCV_DOCKER_WORKDIR }}
        git config user.email "opencv.ci"
        git config user.name "opencv.ci"
        git pull -v "https://github.com/${{ env.PR_AUTHOR }}/opencv" "${{ env.SOURCE_BRANCH_NAME }}"
    - name: Clone opencv_contrib
      run: git clone --single-branch --branch ${{ env.TARGET_BRANCH_NAME }} --depth 1 https://github.com/opencv/opencv_contrib.git /opencv_contrib
    - name: Configure OpenCV Contrib
      run: |
        cd /opencv-contrib-build
        cmake -G Ninja ${{ env.EXTRA_CMAKE_OPTIONS }} -DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules ${{ env.OPENCV_DOCKER_WORKDIR }}
    - name: Build OpenCV Contrib
      run: |
        cd /opencv-contrib-build
        ninja
