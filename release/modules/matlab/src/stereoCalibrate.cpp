/*
 * file:   stereoCalibrate.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/calib3d.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * stereoCalibrate
 * double stereoCalibrate(vector_Mat objectPoints, vector_Mat imagePoints1, vector_Mat imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, int flags=CALIB_FIX_INTRINSIC, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6));
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("stereoCalibrate");
  parser.addVariant("stereoCalibrate", 8, 2, "flags", "criteria");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(9);

  
  // unpack the arguments
  vector_Mat objectPoints = inputs[0].toVectorMat();
  vector_Mat imagePoints1 = inputs[1].toVectorMat();
  vector_Mat imagePoints2 = inputs[2].toVectorMat();
  Mat cameraMatrix1 = inputs[3].toMat();
  Mat distCoeffs1 = inputs[4].toMat();
  Mat cameraMatrix2 = inputs[5].toMat();
  Mat distCoeffs2 = inputs[6].toMat();
  Size imageSize = inputs[7].toSize();
  int flags = inputs[8].empty() ? (int) CALIB_FIX_INTRINSIC : inputs[8].toInt();
  TermCriteria criteria = inputs[9].empty() ? (TermCriteria) TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6) : inputs[9].toTermCriteria();
  Mat R;
  Mat T;
  Mat E;
  Mat F;
  double retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, flags, criteria);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in stereoCalibrate");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;
  outputs[1] = cameraMatrix1;
  outputs[2] = distCoeffs1;
  outputs[3] = cameraMatrix2;
  outputs[4] = distCoeffs2;
  outputs[5] = R;
  outputs[6] = T;
  outputs[7] = E;
  outputs[8] = F;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}