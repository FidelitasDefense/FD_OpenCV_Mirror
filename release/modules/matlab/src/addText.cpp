/*
 * file:   addText.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/highgui.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * addText
 * void addText(Mat img, String text, Point org, String nameFont, int pointSize=-1, Scalar color=Scalar::all(0), int weight=QT_FONT_NORMAL, int style=QT_STYLE_NORMAL, int spacing=0);
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray**,
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("addText");
  parser.addVariant("addText", 4, 5, "pointSize", "color", "weight", "style", "spacing");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());

  
  // unpack the arguments
  Mat img = inputs[0].toMat();
  String text = inputs[1].toString();
  Point org = inputs[2].toPoint();
  String nameFont = inputs[3].toString();
  int pointSize = inputs[4].empty() ? (int) -1 : inputs[4].toInt();
  Scalar color = inputs[5].empty() ? (Scalar) Scalar::all(0) : inputs[5].toScalar();
  int weight = inputs[6].empty() ? (int) QT_FONT_NORMAL : inputs[6].toInt();
  int style = inputs[7].empty() ? (int) QT_STYLE_NORMAL : inputs[7].toInt();
  int spacing = inputs[8].empty() ? (int) 0 : inputs[8].toInt();

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    cv::addText(img, text, org, nameFont, pointSize, color, weight, style, spacing);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in addText");
  }
  


}