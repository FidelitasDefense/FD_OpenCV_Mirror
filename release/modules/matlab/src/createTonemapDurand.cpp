/*
 * file:   createTonemapDurand.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/photo.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * createTonemapDurand
 * Ptr_TonemapDurand createTonemapDurand(float gamma=1.0f, float contrast=4.0f, float saturation=1.0f, float sigma_space=2.0f, float sigma_color=2.0f);
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("createTonemapDurand");
  parser.addVariant("createTonemapDurand", 0, 5, "gamma", "contrast", "saturation", "sigma_space", "sigma_color");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(1);

  
  // unpack the arguments
  float gamma = inputs[0].empty() ? (float) 1.0f : inputs[0].toFloat();
  float contrast = inputs[1].empty() ? (float) 4.0f : inputs[1].toFloat();
  float saturation = inputs[2].empty() ? (float) 1.0f : inputs[2].toFloat();
  float sigma_space = inputs[3].empty() ? (float) 2.0f : inputs[3].toFloat();
  float sigma_color = inputs[4].empty() ? (float) 2.0f : inputs[4].toFloat();
  Ptr_TonemapDurand retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = cv::createTonemapDurand(gamma, contrast, saturation, sigma_space, sigma_color);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in createTonemapDurand");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}