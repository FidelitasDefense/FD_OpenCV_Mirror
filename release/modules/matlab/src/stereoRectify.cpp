/*
 * file:   stereoRectify.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/calib3d.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * stereoRectify
 * void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags=CALIB_ZERO_DISPARITY, double alpha=-1, Size newImageSize=Size(), Rect* validPixROI1=0, Rect* validPixROI2=0);
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("stereoRectify");
  parser.addVariant("stereoRectify", 7, 3, "flags", "alpha", "newImageSize");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(7);

  
  // unpack the arguments
  Mat cameraMatrix1 = inputs[0].toMat();
  Mat distCoeffs1 = inputs[1].toMat();
  Mat cameraMatrix2 = inputs[2].toMat();
  Mat distCoeffs2 = inputs[3].toMat();
  Size imageSize = inputs[4].toSize();
  Mat R = inputs[5].toMat();
  Mat T = inputs[6].toMat();
  int flags = inputs[7].empty() ? (int) CALIB_ZERO_DISPARITY : inputs[7].toInt();
  double alpha = inputs[8].empty() ? (double) -1 : inputs[8].toDouble();
  Size newImageSize = inputs[9].empty() ? (Size) Size() : inputs[9].toSize();
  Mat R1;
  Mat R2;
  Mat P1;
  Mat P2;
  Mat Q;
  Rect validPixROI1;
  Rect validPixROI2;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    cv::stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, R1, R2, P1, P2, Q, flags, alpha, newImageSize, &validPixROI1, &validPixROI2);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in stereoRectify");
  }
  
  // assign the outputs into the bridge
  outputs[0] = R1;
  outputs[1] = R2;
  outputs[2] = P1;
  outputs[3] = P2;
  outputs[4] = Q;
  outputs[5] = validPixROI1;
  outputs[6] = validPixROI2;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}