/*
 * file:   arrowedLine.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/imgproc.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * arrowedLine
 * void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness=1, int line_type=8, int shift=0, double tipLength=0.1);
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("arrowedLine");
  parser.addVariant("arrowedLine", 4, 4, "thickness", "line_type", "shift", "tipLength");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(1);

  
  // unpack the arguments
  Mat img = inputs[0].toMat();
  Point pt1 = inputs[1].toPoint();
  Point pt2 = inputs[2].toPoint();
  Scalar color = inputs[3].toScalar();
  int thickness = inputs[4].empty() ? (int) 1 : inputs[4].toInt();
  int line_type = inputs[5].empty() ? (int) 8 : inputs[5].toInt();
  int shift = inputs[6].empty() ? (int) 0 : inputs[6].toInt();
  double tipLength = inputs[7].empty() ? (double) 0.1 : inputs[7].toDouble();

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    cv::arrowedLine(img, pt1, pt2, color, thickness, line_type, shift, tipLength);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in arrowedLine");
  }
  
  // assign the outputs into the bridge
  outputs[0] = img;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}