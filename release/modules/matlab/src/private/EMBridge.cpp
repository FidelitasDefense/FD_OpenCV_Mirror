/*
 * file:   EMBridge.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <mex.h>
#include <vector>
#include <string>
#include <opencv2/matlab/map.hpp>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/core.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

namespace {

typedef std::vector<Bridge> (*)(EM&, const std::vector<Bridge>&) MethodSignature;


// wrapper for getClustersNumber() method
std::vector<Bridge> getClustersNumber(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  int retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.getClustersNumber();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in getClustersNumber");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for setClustersNumber() method
std::vector<Bridge> setClustersNumber(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs;
  
  // unpack the arguments
  int val = inputs[0].toInt();

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.setClustersNumber(val);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in setClustersNumber");
  }
  

  return outputs;
}

// wrapper for getCovarianceMatrixType() method
std::vector<Bridge> getCovarianceMatrixType(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  int retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.getCovarianceMatrixType();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in getCovarianceMatrixType");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for setCovarianceMatrixType() method
std::vector<Bridge> setCovarianceMatrixType(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs;
  
  // unpack the arguments
  int val = inputs[0].toInt();

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.setCovarianceMatrixType(val);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in setCovarianceMatrixType");
  }
  

  return outputs;
}

// wrapper for getTermCriteria() method
std::vector<Bridge> getTermCriteria(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  TermCriteria retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.getTermCriteria();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in getTermCriteria");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for setTermCriteria() method
std::vector<Bridge> setTermCriteria(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs;
  
  // unpack the arguments
  TermCriteria val = inputs[0].toTermCriteria();

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.setTermCriteria(val);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in setTermCriteria");
  }
  

  return outputs;
}

// wrapper for getWeights() method
std::vector<Bridge> getWeights(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  Mat retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.getWeights();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in getWeights");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for getMeans() method
std::vector<Bridge> getMeans(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  Mat retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.getMeans();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in getMeans");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for getCovs() method
std::vector<Bridge> getCovs(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  vector_Mat covs;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.getCovs(covs);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in getCovs");
  }
  
  // assign the outputs into the bridge
  outputs[0] = covs;

  return outputs;
}

// wrapper for predict() method
std::vector<Bridge> predict(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(2);
  
  // unpack the arguments
  Mat samples = inputs[0].toMat();
  int flags = inputs[1].empty() ? (int) 0 : inputs[1].toInt();
  Mat results;
  float retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.predict(samples, results, flags);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in predict");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;
  outputs[1] = results;

  return outputs;
}

// wrapper for predict2() method
std::vector<Bridge> predict2(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(2);
  
  // unpack the arguments
  Mat sample = inputs[0].toMat();
  Mat probs;
  Vec2d retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.predict2(sample, probs);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in predict2");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;
  outputs[1] = probs;

  return outputs;
}

// wrapper for trainEM() method
std::vector<Bridge> trainEM(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(4);
  
  // unpack the arguments
  Mat samples = inputs[0].toMat();
  Mat logLikelihoods;
  Mat labels;
  Mat probs;
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.trainEM(samples, logLikelihoods, labels, probs);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in trainEM");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;
  outputs[1] = logLikelihoods;
  outputs[2] = labels;
  outputs[3] = probs;

  return outputs;
}

// wrapper for trainE() method
std::vector<Bridge> trainE(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(4);
  
  // unpack the arguments
  Mat samples = inputs[0].toMat();
  Mat means0 = inputs[1].toMat();
  Mat covs0 = inputs[2].empty() ? (Mat) Mat() : inputs[2].toMat();
  Mat weights0 = inputs[3].empty() ? (Mat) Mat() : inputs[3].toMat();
  Mat logLikelihoods;
  Mat labels;
  Mat probs;
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.trainE(samples, means0, covs0, weights0, logLikelihoods, labels, probs);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in trainE");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;
  outputs[1] = logLikelihoods;
  outputs[2] = labels;
  outputs[3] = probs;

  return outputs;
}

// wrapper for trainM() method
std::vector<Bridge> trainM(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(4);
  
  // unpack the arguments
  Mat samples = inputs[0].toMat();
  Mat probs0 = inputs[1].toMat();
  Mat logLikelihoods;
  Mat labels;
  Mat probs;
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.trainM(samples, probs0, logLikelihoods, labels, probs);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in trainM");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;
  outputs[1] = logLikelihoods;
  outputs[2] = labels;
  outputs[3] = probs;

  return outputs;
}

// wrapper for create() method
std::vector<Bridge> create(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  Ptr_EM retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.create();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in create");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for load() method
std::vector<Bridge> load(EM& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  String filepath = inputs[0].toString();
  String nodeName = inputs[1].empty() ? (String) String() : inputs[1].toString();
  Ptr_EM retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.load(filepath, nodeName);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in load");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

Map<std::string, MethodSignature> createMethodMap() {
  Map<std::string, MethodSignature> m;
  m["getClustersNumber"] = &getClustersNumber;
  m["setClustersNumber"] = &setClustersNumber;
  m["getCovarianceMatrixType"] = &getCovarianceMatrixType;
  m["setCovarianceMatrixType"] = &setCovarianceMatrixType;
  m["getTermCriteria"] = &getTermCriteria;
  m["setTermCriteria"] = &setTermCriteria;
  m["getWeights"] = &getWeights;
  m["getMeans"] = &getMeans;
  m["getCovs"] = &getCovs;
  m["predict"] = &predict;
  m["predict2"] = &predict2;
  m["trainEM"] = &trainEM;
  m["trainE"] = &trainE;
  m["trainM"] = &trainM;
  m["create"] = &create;
  m["load"] = &load;

  return m;
}
static const Map<std::string, MethodSignature> methods = createMethodMap();

// map of created EM instances. Don't trust the user to keep them safe...
static Map<void *, EM> instances;

/*
 * EM
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  Bridge method_name(prhs[0]);

  Bridge handle(prhs[1]);
  std::vector<Bridge> brhs(prhs+2, prhs+nrhs);

  // retrieve the instance of interest
  try {
    EM& inst = instances.at(handle.address());
  } catch (const std::out_of_range& e) {
    mexErrMsgTxt("Invalid object instance provided");
  }

  // invoke the correct method on the data
  try {
    std::vector<Bridge> blhs = (*methods.at(method_name))(inst, brhs);
  } catch (const std::out_of_range& e) {
    mexErrMsgTxt("Unknown method specified");
  }



}

} // end namespace