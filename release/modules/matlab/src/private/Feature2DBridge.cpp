/*
 * file:   Feature2DBridge.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <mex.h>
#include <vector>
#include <string>
#include <opencv2/matlab/map.hpp>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/core.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

namespace {

typedef std::vector<Bridge> (*)(Feature2D&, const std::vector<Bridge>&) MethodSignature;


// wrapper for detect() method
std::vector<Bridge> detect(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  Mat image = inputs[0].toMat();
  Mat mask = inputs[1].empty() ? (Mat) Mat() : inputs[1].toMat();
  vector_KeyPoint keypoints;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.detect(image, keypoints, mask);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in detect");
  }
  
  // assign the outputs into the bridge
  outputs[0] = keypoints;

  return outputs;
}

// wrapper for detect() method
std::vector<Bridge> detect(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  vector_Mat images = inputs[0].toVectorMat();
  vector_Mat masks = inputs[1].empty() ? (vector_Mat) vector_Mat() : inputs[1].toVectorMat();
  vector_vector_KeyPoint keypoints;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.detect(images, keypoints, masks);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in detect");
  }
  
  // assign the outputs into the bridge
  outputs[0] = keypoints;

  return outputs;
}

// wrapper for compute() method
std::vector<Bridge> compute(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(2);
  
  // unpack the arguments
  Mat image = inputs[0].toMat();
  vector_KeyPoint keypoints = inputs[1].toVectorKeyPoint();
  Mat descriptors;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.compute(image, keypoints, descriptors);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in compute");
  }
  
  // assign the outputs into the bridge
  outputs[0] = keypoints;
  outputs[1] = descriptors;

  return outputs;
}

// wrapper for compute() method
std::vector<Bridge> compute(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(2);
  
  // unpack the arguments
  vector_Mat images = inputs[0].toVectorMat();
  vector_vector_KeyPoint keypoints = inputs[1].toVectorVectorKeyPoint();
  vector_Mat descriptors;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.compute(images, keypoints, descriptors);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in compute");
  }
  
  // assign the outputs into the bridge
  outputs[0] = keypoints;
  outputs[1] = descriptors;

  return outputs;
}

// wrapper for detectAndCompute() method
std::vector<Bridge> detectAndCompute(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(2);
  
  // unpack the arguments
  Mat image = inputs[0].toMat();
  Mat mask = inputs[1].toMat();
  bool useProvidedKeypoints = inputs[2].empty() ? (bool) false : inputs[2].toBool();
  vector_KeyPoint keypoints;
  Mat descriptors;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.detectAndCompute(image, mask, keypoints, descriptors, useProvidedKeypoints);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in detectAndCompute");
  }
  
  // assign the outputs into the bridge
  outputs[0] = keypoints;
  outputs[1] = descriptors;

  return outputs;
}

// wrapper for descriptorSize() method
std::vector<Bridge> descriptorSize(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  int retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.descriptorSize();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in descriptorSize");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for descriptorType() method
std::vector<Bridge> descriptorType(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  int retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.descriptorType();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in descriptorType");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for defaultNorm() method
std::vector<Bridge> defaultNorm(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  int retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.defaultNorm();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in defaultNorm");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for write() method
std::vector<Bridge> write(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs;
  
  // unpack the arguments
  String fileName = inputs[0].toString();

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.write(fileName);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in write");
  }
  

  return outputs;
}

// wrapper for read() method
std::vector<Bridge> read(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs;
  
  // unpack the arguments
  String fileName = inputs[0].toString();

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.read(fileName);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in read");
  }
  

  return outputs;
}

// wrapper for empty() method
std::vector<Bridge> empty(Feature2D& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.empty();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in empty");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

Map<std::string, MethodSignature> createMethodMap() {
  Map<std::string, MethodSignature> m;
  m["detect"] = &detect;
  m["detect"] = &detect;
  m["compute"] = &compute;
  m["compute"] = &compute;
  m["detectAndCompute"] = &detectAndCompute;
  m["descriptorSize"] = &descriptorSize;
  m["descriptorType"] = &descriptorType;
  m["defaultNorm"] = &defaultNorm;
  m["write"] = &write;
  m["read"] = &read;
  m["empty"] = &empty;

  return m;
}
static const Map<std::string, MethodSignature> methods = createMethodMap();

// map of created Feature2D instances. Don't trust the user to keep them safe...
static Map<void *, Feature2D> instances;

/*
 * Feature2D
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  Bridge method_name(prhs[0]);

  Bridge handle(prhs[1]);
  std::vector<Bridge> brhs(prhs+2, prhs+nrhs);

  // retrieve the instance of interest
  try {
    Feature2D& inst = instances.at(handle.address());
  } catch (const std::out_of_range& e) {
    mexErrMsgTxt("Invalid object instance provided");
  }

  // invoke the correct method on the data
  try {
    std::vector<Bridge> blhs = (*methods.at(method_name))(inst, brhs);
  } catch (const std::out_of_range& e) {
    mexErrMsgTxt("Unknown method specified");
  }



}

} // end namespace