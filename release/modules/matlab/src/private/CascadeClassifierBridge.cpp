/*
 * file:   CascadeClassifierBridge.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <mex.h>
#include <vector>
#include <string>
#include <opencv2/matlab/map.hpp>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/core.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

namespace {

typedef std::vector<Bridge> (*)(CascadeClassifier&, const std::vector<Bridge>&) MethodSignature;


// wrapper for CascadeClassifier() constructor
CascadeClassifier CascadeClassifier(const std::vector<Bridge>& inputs) {
  

  CascadeClassifier obj = cv::CascadeClassifier();
  return obj;
}

// wrapper for CascadeClassifier() constructor
CascadeClassifier CascadeClassifier(const std::vector<Bridge>& inputs) {
  
  // unpack the arguments
  String filename = inputs[0].toString();

  CascadeClassifier obj = cv::CascadeClassifier(filename);
  return obj;
}

// wrapper for empty() method
std::vector<Bridge> empty(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.empty();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in empty");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for load() method
std::vector<Bridge> load(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  String filename = inputs[0].toString();
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.load(filename);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in load");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for read() method
std::vector<Bridge> read(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  FileNode node = inputs[0].toFileNode();
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.read(node);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in read");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for detectMultiScale() method
std::vector<Bridge> detectMultiScale(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  Mat image = inputs[0].toMat();
  double scaleFactor = inputs[1].empty() ? (double) 1.1 : inputs[1].toDouble();
  int minNeighbors = inputs[2].empty() ? (int) 3 : inputs[2].toInt();
  int flags = inputs[3].empty() ? (int) 0 : inputs[3].toInt();
  Size minSize = inputs[4].empty() ? (Size) Size() : inputs[4].toSize();
  Size maxSize = inputs[5].empty() ? (Size) Size() : inputs[5].toSize();
  vector_Rect objects;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.detectMultiScale(image, objects, scaleFactor, minNeighbors, flags, minSize, maxSize);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in detectMultiScale");
  }
  
  // assign the outputs into the bridge
  outputs[0] = objects;

  return outputs;
}

// wrapper for detectMultiScale() method
std::vector<Bridge> detectMultiScale(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(2);
  
  // unpack the arguments
  Mat image = inputs[0].toMat();
  double scaleFactor = inputs[1].empty() ? (double) 1.1 : inputs[1].toDouble();
  int minNeighbors = inputs[2].empty() ? (int) 3 : inputs[2].toInt();
  int flags = inputs[3].empty() ? (int) 0 : inputs[3].toInt();
  Size minSize = inputs[4].empty() ? (Size) Size() : inputs[4].toSize();
  Size maxSize = inputs[5].empty() ? (Size) Size() : inputs[5].toSize();
  vector_Rect objects;
  vector_int numDetections;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.detectMultiScale(image, objects, numDetections, scaleFactor, minNeighbors, flags, minSize, maxSize);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in detectMultiScale");
  }
  
  // assign the outputs into the bridge
  outputs[0] = objects;
  outputs[1] = numDetections;

  return outputs;
}

// wrapper for detectMultiScale() method
std::vector<Bridge> detectMultiScale(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(3);
  
  // unpack the arguments
  Mat image = inputs[0].toMat();
  double scaleFactor = inputs[1].empty() ? (double) 1.1 : inputs[1].toDouble();
  int minNeighbors = inputs[2].empty() ? (int) 3 : inputs[2].toInt();
  int flags = inputs[3].empty() ? (int) 0 : inputs[3].toInt();
  Size minSize = inputs[4].empty() ? (Size) Size() : inputs[4].toSize();
  Size maxSize = inputs[5].empty() ? (Size) Size() : inputs[5].toSize();
  bool outputRejectLevels = inputs[6].empty() ? (bool) false : inputs[6].toBool();
  vector_Rect objects;
  vector_int rejectLevels;
  vector_double levelWeights;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.detectMultiScale(image, objects, rejectLevels, levelWeights, scaleFactor, minNeighbors, flags, minSize, maxSize, outputRejectLevels);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in detectMultiScale");
  }
  
  // assign the outputs into the bridge
  outputs[0] = objects;
  outputs[1] = rejectLevels;
  outputs[2] = levelWeights;

  return outputs;
}

// wrapper for isOldFormatCascade() method
std::vector<Bridge> isOldFormatCascade(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.isOldFormatCascade();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in isOldFormatCascade");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for getOriginalWindowSize() method
std::vector<Bridge> getOriginalWindowSize(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  Size retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.getOriginalWindowSize();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in getOriginalWindowSize");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for getFeatureType() method
std::vector<Bridge> getFeatureType(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  int retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.getFeatureType();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in getFeatureType");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for convert() method
std::vector<Bridge> convert(CascadeClassifier& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  String oldcascade = inputs[0].toString();
  String newcascade = inputs[1].toString();
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.convert(oldcascade, newcascade);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in convert");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

Map<std::string, MethodSignature> createMethodMap() {
  Map<std::string, MethodSignature> m;
  m["CascadeClassifier"] = &CascadeClassifier;
  m["CascadeClassifier"] = &CascadeClassifier;
  m["empty"] = &empty;
  m["load"] = &load;
  m["read"] = &read;
  m["detectMultiScale"] = &detectMultiScale;
  m["detectMultiScale"] = &detectMultiScale;
  m["detectMultiScale"] = &detectMultiScale;
  m["isOldFormatCascade"] = &isOldFormatCascade;
  m["getOriginalWindowSize"] = &getOriginalWindowSize;
  m["getFeatureType"] = &getFeatureType;
  m["convert"] = &convert;

  return m;
}
static const Map<std::string, MethodSignature> methods = createMethodMap();

// map of created CascadeClassifier instances. Don't trust the user to keep them safe...
static Map<void *, CascadeClassifier> instances;

/*
 * CascadeClassifier
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  Bridge method_name(prhs[0]);

  Bridge handle(prhs[1]);
  std::vector<Bridge> brhs(prhs+2, prhs+nrhs);

  // retrieve the instance of interest
  try {
    CascadeClassifier& inst = instances.at(handle.address());
  } catch (const std::out_of_range& e) {
    mexErrMsgTxt("Invalid object instance provided");
  }

  // invoke the correct method on the data
  try {
    std::vector<Bridge> blhs = (*methods.at(method_name))(inst, brhs);
  } catch (const std::out_of_range& e) {
    mexErrMsgTxt("Unknown method specified");
  }



}

} // end namespace