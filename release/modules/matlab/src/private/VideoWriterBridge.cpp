/*
 * file:   VideoWriterBridge.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <mex.h>
#include <vector>
#include <string>
#include <opencv2/matlab/map.hpp>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/core.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

namespace {

typedef std::vector<Bridge> (*)(VideoWriter&, const std::vector<Bridge>&) MethodSignature;


// wrapper for VideoWriter() constructor
VideoWriter VideoWriter(const std::vector<Bridge>& inputs) {
  

  VideoWriter obj = cv::VideoWriter();
  return obj;
}

// wrapper for VideoWriter() constructor
VideoWriter VideoWriter(const std::vector<Bridge>& inputs) {
  
  // unpack the arguments
  String filename = inputs[0].toString();
  int fourcc = inputs[1].toInt();
  double fps = inputs[2].toDouble();
  Size frameSize = inputs[3].toSize();
  bool isColor = inputs[4].empty() ? (bool) true : inputs[4].toBool();

  VideoWriter obj = cv::VideoWriter(filename, fourcc, fps, frameSize, isColor);
  return obj;
}

// wrapper for open() method
std::vector<Bridge> open(VideoWriter& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  String filename = inputs[0].toString();
  int fourcc = inputs[1].toInt();
  double fps = inputs[2].toDouble();
  Size frameSize = inputs[3].toSize();
  bool isColor = inputs[4].empty() ? (bool) true : inputs[4].toBool();
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.open(filename, fourcc, fps, frameSize, isColor);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in open");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for isOpened() method
std::vector<Bridge> isOpened(VideoWriter& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.isOpened();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in isOpened");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for release() method
std::vector<Bridge> release(VideoWriter& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs;
  

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.release();
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in release");
  }
  

  return outputs;
}

// wrapper for write() method
std::vector<Bridge> write(VideoWriter& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs;
  
  // unpack the arguments
  Mat image = inputs[0].toMat();

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    inst.write(image);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in write");
  }
  

  return outputs;
}

// wrapper for set() method
std::vector<Bridge> set(VideoWriter& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  int propId = inputs[0].toInt();
  double value = inputs[1].toDouble();
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.set(propId, value);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in set");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for get() method
std::vector<Bridge> get(VideoWriter& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  int propId = inputs[0].toInt();
  double retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.get(propId);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in get");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

// wrapper for fourcc() method
std::vector<Bridge> fourcc(VideoWriter& inst, const std::vector<Bridge>& inputs) {
  std::vector<Bridge> outputs(1);
  
  // unpack the arguments
  char c1 = inputs[0].toChar();
  char c2 = inputs[1].toChar();
  char c3 = inputs[2].toChar();
  char c4 = inputs[3].toChar();
  int retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = inst.fourcc(c1, c2, c3, c4);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in fourcc");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;

  return outputs;
}

Map<std::string, MethodSignature> createMethodMap() {
  Map<std::string, MethodSignature> m;
  m["VideoWriter"] = &VideoWriter;
  m["VideoWriter"] = &VideoWriter;
  m["open"] = &open;
  m["isOpened"] = &isOpened;
  m["release"] = &release;
  m["write"] = &write;
  m["set"] = &set;
  m["get"] = &get;
  m["fourcc"] = &fourcc;

  return m;
}
static const Map<std::string, MethodSignature> methods = createMethodMap();

// map of created VideoWriter instances. Don't trust the user to keep them safe...
static Map<void *, VideoWriter> instances;

/*
 * VideoWriter
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  Bridge method_name(prhs[0]);

  Bridge handle(prhs[1]);
  std::vector<Bridge> brhs(prhs+2, prhs+nrhs);

  // retrieve the instance of interest
  try {
    VideoWriter& inst = instances.at(handle.address());
  } catch (const std::out_of_range& e) {
    mexErrMsgTxt("Invalid object instance provided");
  }

  // invoke the correct method on the data
  try {
    std::vector<Bridge> blhs = (*methods.at(method_name))(inst, brhs);
  } catch (const std::out_of_range& e) {
    mexErrMsgTxt("Unknown method specified");
  }



}

} // end namespace