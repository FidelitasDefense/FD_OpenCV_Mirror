/*
 * file:   composeRT.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/calib3d.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * composeRT
 * void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1=Mat(), Mat dr3dt1=Mat(), Mat dr3dr2=Mat(), Mat dr3dt2=Mat(), Mat dt3dr1=Mat(), Mat dt3dt1=Mat(), Mat dt3dr2=Mat(), Mat dt3dt2=Mat());
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("composeRT");
  parser.addVariant("composeRT", 4, 0);
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(10);

  
  // unpack the arguments
  Mat rvec1 = inputs[0].toMat();
  Mat tvec1 = inputs[1].toMat();
  Mat rvec2 = inputs[2].toMat();
  Mat tvec2 = inputs[3].toMat();
  Mat rvec3;
  Mat tvec3;
  Mat dr3dr1;
  Mat dr3dt1;
  Mat dr3dr2;
  Mat dr3dt2;
  Mat dt3dr1;
  Mat dt3dt1;
  Mat dt3dr2;
  Mat dt3dt2;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    cv::composeRT(rvec1, tvec1, rvec2, tvec2, rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in composeRT");
  }
  
  // assign the outputs into the bridge
  outputs[0] = rvec3;
  outputs[1] = tvec3;
  outputs[2] = dr3dr1;
  outputs[3] = dr3dt1;
  outputs[4] = dr3dr2;
  outputs[5] = dr3dt2;
  outputs[6] = dt3dr1;
  outputs[7] = dt3dt1;
  outputs[8] = dt3dr2;
  outputs[9] = dt3dt2;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}