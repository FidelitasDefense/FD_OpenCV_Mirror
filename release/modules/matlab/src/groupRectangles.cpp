/*
 * file:   groupRectangles.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/objdetect.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * groupRectangles
 * void groupRectangles(vector_Rect rectList, vector_int weights, int groupThreshold, double eps=0.2);
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("groupRectangles");
  parser.addVariant("groupRectangles", 2, 1, "eps");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(2);

  
  // unpack the arguments
  vector_Rect rectList = inputs[0].toVectorRect();
  int groupThreshold = inputs[1].toInt();
  double eps = inputs[2].empty() ? (double) 0.2 : inputs[2].toDouble();
  vector_int weights;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    cv::groupRectangles(rectList, weights, groupThreshold, eps);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in groupRectangles");
  }
  
  // assign the outputs into the bridge
  outputs[0] = rectList;
  outputs[1] = weights;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}