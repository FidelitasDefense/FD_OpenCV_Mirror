/*
 * file:   createLineSegmentDetector.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/imgproc.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * createLineSegmentDetector
 * Ptr_LineSegmentDetector createLineSegmentDetector(int _refine=LSD_REFINE_STD, double _scale=0.8, double _sigma_scale=0.6, double _quant=2.0, double _ang_th=22.5, double _log_eps=0, double _density_th=0.7, int _n_bins=1024);
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("createLineSegmentDetector");
  parser.addVariant("createLineSegmentDetector", 0, 8, "_refine", "_scale", "_sigma_scale", "_quant", "_ang_th", "_log_eps", "_density_th", "_n_bins");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(1);

  
  // unpack the arguments
  int _refine = inputs[0].empty() ? (int) LSD_REFINE_STD : inputs[0].toInt();
  double _scale = inputs[1].empty() ? (double) 0.8 : inputs[1].toDouble();
  double _sigma_scale = inputs[2].empty() ? (double) 0.6 : inputs[2].toDouble();
  double _quant = inputs[3].empty() ? (double) 2.0 : inputs[3].toDouble();
  double _ang_th = inputs[4].empty() ? (double) 22.5 : inputs[4].toDouble();
  double _log_eps = inputs[5].empty() ? (double) 0 : inputs[5].toDouble();
  double _density_th = inputs[6].empty() ? (double) 0.7 : inputs[6].toDouble();
  int _n_bins = inputs[7].empty() ? (int) 1024 : inputs[7].toInt();
  Ptr_LineSegmentDetector retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = cv::createLineSegmentDetector(_refine, _scale, _sigma_scale, _quant, _ang_th, _log_eps, _density_th, _n_bins);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in createLineSegmentDetector");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}