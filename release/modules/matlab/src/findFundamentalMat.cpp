/*
 * file:   findFundamentalMat.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/calib3d.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * findFundamentalMat
 * Mat findFundamentalMat(Mat points1, Mat points2, int method=FM_RANSAC, double param1=3., double param2=0.99, Mat mask=Mat());
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("findFundamentalMat");
  parser.addVariant("findFundamentalMat", 2, 3, "method", "param1", "param2");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(2);

  
  // unpack the arguments
  Mat points1 = inputs[0].toMat();
  Mat points2 = inputs[1].toMat();
  int method = inputs[2].empty() ? (int) FM_RANSAC : inputs[2].toInt();
  double param1 = inputs[3].empty() ? (double) 3. : inputs[3].toDouble();
  double param2 = inputs[4].empty() ? (double) 0.99 : inputs[4].toDouble();
  Mat mask;
  Mat retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = cv::findFundamentalMat(points1, points2, method, param1, param2, mask);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in findFundamentalMat");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;
  outputs[1] = mask;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}