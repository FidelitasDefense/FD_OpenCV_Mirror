/*
 * file:   findCirclesGrid.cpp
 * author: A trusty code generator
 * date:   Tue, 28 Feb 2017 10:45:57
 *
 * This file was autogenerated, do not modify.
 * See LICENSE for full modification and redistribution details.
 * Copyright 2017 The OpenCV Foundation
 */
#include <string>
#include <vector>
#include <cassert>
#include <exception>
#include <opencv2/matlab/bridge.hpp>
#include <opencv2/calib3d.hpp>
using namespace cv;
using namespace matlab;
using namespace bridge;

/*
 * findCirclesGrid
 * bool findCirclesGrid(Mat image, Size patternSize, Mat centers, int flags=CALIB_CB_SYMMETRIC_GRID, Ptr_FeatureDetector blobDetector=SimpleBlobDetector::create());
 * Gateway routine
 *   nlhs - number of return arguments
 *   plhs - pointers to return arguments
 *   nrhs - number of input arguments
 *   prhs - pointers to input arguments
 */
void mexFunction(int nlhs, mxArray* plhs[],
                 int nrhs, const mxArray* prhs[]) {

  // parse the inputs
  ArgumentParser parser("findCirclesGrid");
  parser.addVariant("findCirclesGrid", 2, 2, "flags", "blobDetector");
  MxArrayVector sorted = parser.parse(MxArrayVector(prhs, prhs+nrhs));

  // setup
  BridgeVector inputs(sorted.begin(), sorted.end());
  BridgeVector outputs(2);

  
  // unpack the arguments
  Mat image = inputs[0].toMat();
  Size patternSize = inputs[1].toSize();
  int flags = inputs[2].empty() ? (int) CALIB_CB_SYMMETRIC_GRID : inputs[2].toInt();
  Ptr_FeatureDetector blobDetector = inputs[3].empty() ? (Ptr_FeatureDetector) SimpleBlobDetector::create() : inputs[3].toPtrFeatureDetector();
  Mat centers;
  bool retval;

  // call the opencv function
  // [out =] namespace.fun(src1, ..., srcn, dst1, ..., dstn, opt1, ..., optn);
  try {
    retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector);
  } catch(cv::Exception& e) {
    error(std::string("cv::exception caught: ").append(e.what()).c_str());
  } catch(std::exception& e) {
    error(std::string("std::exception caught: ").append(e.what()).c_str());
  } catch(...) {
    error("Uncaught exception occurred in findCirclesGrid");
  }
  
  // assign the outputs into the bridge
  outputs[0] = retval;
  outputs[1] = centers;


  // push the outputs back to matlab
  for (size_t n = 0; n < static_cast<size_t>(std::max(nlhs,1)); ++n) {
    plhs[n] = outputs[n].toMxArray().releaseOwnership();
  }
}