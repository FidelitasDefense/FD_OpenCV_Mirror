# ----------------------------------------------------------------------------
#  Detect 3rd-party GUI libraries
# ----------------------------------------------------------------------------

# --- QT4/5 ---
ocv_clear_vars(HAVE_QT HAVE_QT5)

macro(ocv_find_package_Qt4)
  find_package(Qt4 COMPONENTS QtCore QtGui QtTest ${ARGN})
  if(QT4_FOUND)
    set(QT_FOUND 1)
    ocv_assert(QT_VERSION_MAJOR EQUAL 4)
  endif()
endmacro()

macro(ocv_find_package_Qt OCV_QT_VER)
  find_package(Qt${OCV_QT_VER} COMPONENTS Core Gui Widgets Test Concurrent ${ARGN} NO_MODULE)
  if(Qt${OCV_QT_VER}_FOUND)
    set(QT_FOUND 1)
    set(QT_VERSION "${Qt${OCV_QT_VER}_VERSION}")
    set(QT_VERSION_MAJOR "${Qt${OCV_QT_VER}_VERSION_MAJOR}")
    set(QT_VERSION_MINOR "${Qt${OCV_QT_VER}_VERSION_MINOR}")
    set(QT_VERSION_PATCH "${Qt${OCV_QT_VER}_VERSION_PATCH}")
    set(QT_VERSION_TWEAK "${Qt${OCV_QT_VER}_VERSION_TWEAK}")
    set(QT_VERSION_COUNT "${Qt${OCV_QT_VER}_VERSION_COUNT}")
  endif()
endmacro()

if(WITH_QT)
  if(NOT WITH_QT GREATER 0)
    # BUG: Qt5Config.cmake script can't handle components properly: find_package(QT NAMES Qt6 Qt5 REQUIRED NO_MODULE COMPONENTS Core Gui Widgets Test Concurrent)
    ocv_find_package_Qt(6 QUIET)
    if(NOT QT_FOUND)
      ocv_find_package_Qt(5 QUIET)
    endif()
    if(NOT QT_FOUND)
      ocv_find_package_Qt4(QUIET)
    endif()
  elseif(WITH_QT EQUAL 4)
    ocv_find_package_Qt4(REQUIRED)
  else()  # WITH_QT=<major version>
    ocv_find_package_Qt("${WITH_QT}" REQUIRED)
  endif()
  if(QT_FOUND)
    set(HAVE_QT ON)
    if(QT_VERSION_MAJOR GREATER 4)
      find_package(Qt${QT_VERSION_MAJOR} COMPONENTS OpenGL QUIET)
      if(Qt${QT_VERSION_MAJOR}OpenGL_FOUND)
        set(QT_QTOPENGL_FOUND ON)  # HAVE_QT_OPENGL is defined below
        if(QT_VERSION_MAJOR GREATER 5) # QGL -> QOpenGL
          find_package(Qt${QT_VERSION_MAJOR} COMPONENTS OpenGLWidgets QUIET)
          if(NOT Qt${QT_VERSION_MAJOR}OpenGLWidgets_FOUND)
            message(STATUS "Qt OpenGLWidgets component not found: turning off Qt OpenGL functionality")
            set(QT_QTOPENGL_FOUND FALSE)
          endif()
        endif()
      endif()
    endif()
  endif()
endif()

# --- GTK ---
ocv_clear_vars(HAVE_GTK HAVE_GTK2 HAVE_GTK3 HAVE_GTHREAD HAVE_GTKGLEXT)
if(WITH_GTK)
  if(NOT WITH_GTK_2_X)
    ocv_check_modules(GTK3 gtk+-3.0)
    if(HAVE_GTK3)
      ocv_add_external_target(gtk3 "${GTK3_INCLUDE_DIRS}" "${GTK3_LIBRARIES}" "HAVE_GTK3;HAVE_GTK")
      set(HAVE_GTK TRUE)
    endif()
  endif()
  if((PROJECT_NAME STREQUAL "OpenCV" AND HIGHGUI_ENABLE_PLUGINS) OR NOT HAVE_GTK3)
    ocv_check_modules(GTK2 gtk+-2.0)
    if(HAVE_GTK2)
      set(MIN_VER_GTK "2.18.0")
      if(GTK2_VERSION VERSION_LESS MIN_VER_GTK)
        message(FATAL_ERROR "GTK support requires a minimum version of ${MIN_VER_GTK} (${GTK2_VERSION} found)")
      else()
        ocv_add_external_target(gtk2 "${GTK2_INCLUDE_DIRS}" "${GTK2_LIBRARIES}" "HAVE_GTK2;HAVE_GTK")
        set(HAVE_GTK TRUE)
      endif()
    endif()
  endif()
  ocv_check_modules(GTHREAD gthread-2.0)
  if(HAVE_GTK AND NOT HAVE_GTHREAD)
    message(FATAL_ERROR "gthread not found. This library is required when building with GTK support")
  else()
    ocv_add_external_target(gthread "${GTHREAD_INCLUDE_DIRS}" "${GTHREAD_LIBRARIES}" "HAVE_GTHREAD")
  endif()
  if((WITH_OPENGL OR HAVE_OPENGL) AND HAVE_GTK2)
    ocv_check_modules(GTKGLEXT gtkglext-1.0)
    if(HAVE_GTKGLEXT)
      ocv_add_external_target(gtkglext "${GTKGLEXT_INCLUDE_DIRS}" "${GTKGLEXT_LIBRARIES}" "HAVE_GTKGLEXT")
    endif()
  endif()
elseif(HAVE_GTK)
  ocv_add_external_target(gtk "${GTK_INCLUDE_DIRS}" "${GTK_LIBRARIES}" "${GTK_DEFINES};HAVE_GTK")
endif()

# --- OpenGl ---
ocv_clear_vars(HAVE_OPENGL HAVE_QT_OPENGL)
if(WITH_OPENGL)
  find_package (OpenGL QUIET)
  if(OpenGL_EGL_FOUND)
    set(HAVE_EGL TRUE)
  endif()
  if(OpenGL_GLX_FOUND)
    set(HAVE_GLX TRUE)
  endif()
  if(WITH_WIN32UI OR (HAVE_QT AND QT_QTOPENGL_FOUND) OR (HAVE_GTKGLEXT AND HAVE_GLX))
    if(OPENGL_FOUND AND (HAVE_GLX OR HAVE_EGL))
      set(HAVE_OPENGL TRUE)
      if(QT_QTOPENGL_FOUND)
        set(HAVE_QT_OPENGL TRUE)
      else()
        ocv_include_directories(${OPENGL_INCLUDE_DIR})
      endif()
    endif()
  endif()
endif(WITH_OPENGL)

# --- Cocoa ---
if(APPLE)
  if(NOT IOS AND CV_CLANG)
    set(HAVE_COCOA YES)
  endif()
endif()
