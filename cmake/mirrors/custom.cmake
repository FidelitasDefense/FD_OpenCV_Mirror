# Gitlab-style mirror
# CMake scripts look for opencv/opencv_3rdparty,
#  OAID/Tengine, 01org/tbb(oneAPI/oneTBB), opencv/ade
#  from OPENCV_DOWNLOAD_MIRROR
ocv_update(OPENCV_DOWNLOAD_MIRROR_URL "")
# Tengine
ocv_update(TENGINE_CUSTOM_PKG_MD5 "")
ocv_update(TENGINE_GITHUB_PKG_MD5 23f61ebb1dd419f1207d8876496289c5) # same as tengine_md5sum for TENGINE commit of e89cf8870de2ff0a80cfe626c0b52b2a16fb302e

# TBB
ocv_update(TBB_CUSTOM_RELEASE "")
ocv_update(TBB_CUSTOM_PKG_NAME "")
ocv_update(TBB_CUSTOM_PKG_MD5 "")
ocv_update(TBB_GITHUB_PKG_MD5 5af6f6c2a24c2043e62e47205e273b1f) # same as OPENCV_TBB_RELEASE_MD5 for TBB release of v2020.2

# ADE
ocv_update(ADE_CUSTOM_RELEASE "")
ocv_update(ADE_CUSTOM_PKG_NAME "")
ocv_update(ADE_CUSTOM_PKG_MD5 "")
ocv_update(ADE_GITHUB_PKG_MD5 b624b995ec9c439cbc2e9e6ee940d3a2) # same as ade_md5 for ADE release of v0.1.1f

macro(ocv_download_url_custom_usercontent)
  string(REPLACE "/" ";" DL_URL_split ${DL_URL})
  list(GET DL_URL_split 5 __COMMIT_ID)
  list(GET DL_URL_split 6 __PKG_NAME)
  set(DL_URL "https://${OPENCV_DOWNLOAD_MIRROR_URL}/opencv/opencv_3rdparty/-/raw/${__COMMIT_ID}/${__PKG_NAME}/")
endmacro()
macro(ocv_download_url_custom_archive_commit_id)
  if("m${${DL_ID}_CUSTOM_PKG_MD5}" STREQUAL "m")
    message(WARNING "ocv_download: specify ${DL_ID}_CUSTOM_PKG_MD5 to download ${DL_ID} from custom source.")
  elseif(${DL_ID}_GITHUB_PKG_MD5 STREQUAL "${DL_HASH}")
    string(REPLACE "/" ";" DL_URL_split ${DL_URL})
    list(GET DL_URL_split 3 __OWNER)
    list(GET DL_URL_split 4 __REPO_NAME)
    set(DL_URL "https://${OPENCV_DOWNLOAD_MIRROR_URL}/${__OWNER}/${__REPO_NAME}/-/archive/")
    set(DL_HASH "${${DL_ID}_CUSTOM_PKG_MD5}")
  else()
    message(WARNING "No information about mirrors for downloading ${DL_FILENAME} from URL='${DL_URL}' and MD5=${DL_HASH}.")
  endif()
endmacro()
macro(ocv_download_url_custom_archive_release)
    if("m${${DL_ID}_CUSTOM_RELEASE}" STREQUAL "m")
      message(WARNING "ocv_download: specify ${DL_ID}_CUSTOM_RELEASE to download ${DL_ID} from custom source.")
      return()
    endif()
    if("m${${DL_ID}_CUSTOM_PKG_NAME}" STREQUAL "m")
      message(WARNING "ocv_download: specify ${DL_ID}_CUSTOM_PKG_NAME to download ${DL_ID} from custom source.")
      return()
    endif()
    if("m${${DL_ID}_CUSTOM_PKG_MD5}" STREQUAL "m")
      message(WARNING "ocv_download: specify ${DL_ID}_CUSTOM_PKG_MD5 to download ${DL_ID} from custom source.")
      return()
    endif()
    string(REPLACE "/" ";" DL_URL_split ${DL_URL})
    list(GET DL_URL_split 3 __OWNER)
    list(GET DL_URL_split 4 __REPO_NAME)
    set(DL_URL "https://${OPENCV_DOWNLOAD_MIRROR_URL}/${__OWNER}/${__REPO_NAME}/-/archive/${${DL_ID}_CUSTOM_PKG_RELEASE}/${__REPO_NAME}-")
    set(DL_HASH "${${DL_ID}_CUSTOM_PKG_MD5}")
endmacro()

if("m${OPENCV_DOWNLOAD_MIRROR_URL}" STREQUAL "m")
  message(WARNING "ocv_download: specify OPENCV_DOWNLOAD_MIRROR_URL to use custom mirror.")
else()
  if((DL_ID STREQUAL "FFMPEG") OR (DL_ID STREQUAL "IPPICV"))
    ocv_download_url_custom_usercontent()
  elseif(DL_ID STREQUAL "TENGINE")
    ocv_download_url_custom_archive_commit_id()
  elseif(DL_ID STREQUAL "TBB")
    ocv_download_url_custom_archive_release()
    set(OPENCV_TBB_SUBDIR "${TBB_CUSTOM_PKG_NAME}" PARENT_SCOPE)
  elseif(DL_ID STREQUAL "ADE")
    ocv_download_url_custom_archive_release()
    set(ade_subdir "${ADE_CUSTOM_PKG_NAME}" PARENT_SCOPE)
  else()
    message(STATUS "ocv_download: Unknown download ID ${DL_ID} for using mirror ${OPENCV_DOWNLOAD_MIRROR_URL}. Use original source instead.")
  endif()
endif()