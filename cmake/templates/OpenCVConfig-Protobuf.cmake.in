set(OpenCV_Protobuf_VERSION "@Protobuf_VERSION@")

function(get_protobuf_version version include)
  file(STRINGS "${include}/google/protobuf/stubs/common.h" ver REGEX "#define GOOGLE_PROTOBUF_VERSION [0-9]+")
  string(REGEX MATCHALL "[0-9]+" ver ${ver})
  math(EXPR major "${ver} / 1000000")
  math(EXPR minor "${ver} / 1000 % 1000")
  math(EXPR patch "${ver} % 1000")
  set(${version} "${major}.${minor}.${patch}" PARENT_SCOPE)
endfunction()

if(NOT Protobuf_FOUND)
  find_package(Protobuf CONFIG QUIET)
endif()

if(NOT Protobuf_FOUND)
  find_package(Protobuf MODULE QUIET)
endif()

# Backwards compatibility
# Define camel case versions of input variables
foreach(UPPER
    PROTOBUF_FOUND
    PROTOBUF_LIBRARY
    PROTOBUF_INCLUDE_DIR
    PROTOBUF_VERSION
    )
    if (DEFINED ${UPPER})
        string(REPLACE "PROTOBUF_" "Protobuf_" Camel ${UPPER})
        if (NOT DEFINED ${Camel})
            set(${Camel} ${${UPPER}})
        endif()
    endif()
endforeach()
# end of compatibility block

if(Protobuf_FOUND)
  if(TARGET protobuf::libprotobuf)
    add_library(libprotobuf INTERFACE IMPORTED)
    set_target_properties(libprotobuf PROPERTIES
      INTERFACE_LINK_LIBRARIES protobuf::libprotobuf
    )
  else()
    add_library(libprotobuf UNKNOWN IMPORTED)
    set_target_properties(libprotobuf PROPERTIES
      IMPORTED_LOCATION "${Protobuf_LIBRARY}"
      INTERFACE_INCLUDE_DIRECTORIES "${Protobuf_INCLUDE_DIR}"
      INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "${Protobuf_INCLUDE_DIR}"
    )
    get_protobuf_version(Protobuf_VERSION "${Protobuf_INCLUDE_DIR}")
  endif()
endif()

if(NOT Protobuf_VERSION VERSION_EQUAL OpenCV_Protobuf_VERSION)
  message(FATAL_ERROR "OpenCV static library was compiled with Protobuf ${OpenCV_Protobuf_VERSION} support. Please, use the same version or rebuild OpenCV with Protobuf ${Protobuf_VERSION}")
endif()
